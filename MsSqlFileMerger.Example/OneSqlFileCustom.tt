<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


<#@ output extension=".sql" encoding="UTF-8" #>
<#@ assembly name="$(SolutionDir)MsSqlFileMerger.Example\$(OutDir)MsSqlFileMerger.dll"#>
<#@ import namespace="MsSqlFileMerger" #>
<#  
    var dbName = "TEST_LOG"; 

    var sqlFolders = new[]{ 
         "Folder01",
         "Folder02",
        };

    var merger = new SqlFileMergeHelper();

    merger.SetScriptRootFolder(Host.ResolveAssemblyReference("$(SolutionDir)"), "\\MsSqlFileMerger.Example\\Sql");

    merger.Output = this;

    // setup generate options
    merger.IsWriteGenOrder = false;
    merger.IsWriteFileName = false;
    merger.RowDelimiterDropCreate = null;
    merger.RowDelimiterObject = "-- ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙";

    merger.LoadParallel(dbName, Encoding.UTF8, sqlFolders, false);

    // add version and date to sql proc body (by template)
    merger.ReplaceInBody("[version]","ver:0.0.1.9");
    merger.ReplaceInBody("[date]",$"date:{DateTime.Now:dd.MM.yyyy}");

    // write generate date
    WriteLine($"-- time {DateTime.Now:dd.MM.yyyy HH:mm}");
    WriteLine("");

    // write script
    merger.WriteSqlScript();

 #>